//JAVA
public final class SomeSingleton {
   public static final SomeSingleton INSTANCE=new SomeSingleton ()

   private SomeSingleton() {
   }

   synchronized public static getInstance(){
          return INSTANCE;

}
//KOTLIN SQL DATABASE
////////////////////////////////////////////////////////////////
private const val TAG = "AppDatabase"

private const val DATABASE_NAME = "TaskTimer.db"
private const val DATABASE_VERSION = 1

internal class AppDatabase private constructor(context: Context) :
    SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {


    override fun onCreate(db: SQLiteDatabase) {
        //CREATE TABLE Tasks (_id INTEGER PRIMARY KEY NULL, Name TEXT NOT NULL, Description TEXT, SortOrder INTEGER);
        Log.d(TAG,"onCreate: starts")
        val sSQL="""CREATE TABLE ${TasksContract.TABLE_NAME} (
            ${TasksContract.Columns.ID} INTEGER PRIMARY KEY NOT NULL,
            ${TasksContract.Columns.TASK_NAME} TEXT NOT NULL,
            ${TasksContract.Columns.TASK_DESCRIPTION} TEXT,
            ${TasksContract.Columns.TASK_NAME} INTEGER);
        """.replaceIndent(" ")
        Log.d(TAG,sSQL)
        db.execSQL(sSQL)
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {

    }


    
    
    //TIM WAY OF SINGLETON
//    companion object {
////        @Volatile
////        private var instance: AppDatabase? = null
////        fun getInstance(context: Context): AppDatabase= 
////            instance ?: synchronized(this) {
////                instance ?: AppDatabase(context).also { instance = it }
////            }
////    }
}